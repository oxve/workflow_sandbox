# Reusable Cobalt CI workflow.

name: main

on:
  workflow_call:
    inputs:
      platform:
        description: 'Cobalt platform.'
        required: true
        type: string
      nightly:
        description: 'Nightly workflow.'
        required: true
        type: string
        default: 'false'
    secrets:
      my_api_key:
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ inputs.platform }} @ ${{ github.event.label.name || github.event.pull_request.number || github.sha }} @ ${{ github.event.label.name && github.event.pull_request.number || github.event.action }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Retrieves configuration from json file.
  initialize:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_PR_REPO_URL: ${{ github.event.pull_request.base.repo.url }}
      GITHUB_EVENT_NUMBER: ${{ github.event.number }}
    if: |
      github.event.action != 'labeled' ||
      github.event.pull_request.merged == false &&
      (
        github.event.action == 'labeled' &&
        github.event.label.name == 'runtest'
      )
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Remove runtest if exists
        if: github.event_name == 'pull_request'
        continue-on-error: true  # Ignore this step if we cannot remove the label.
        run: |
          set +e
          curl \
            -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            ${GITHUB_PR_REPO_URL}/issues/${GITHUB_EVENT_NUMBER}/labels/runtest
        shell: bash
      - id: set-platforms
        shell: bash
        run: |
          platforms=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.platforms')
          echo "platforms=${platforms}" >> $GITHUB_ENV
      - id: set-targets
        shell: bash
        run: |
          targets=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.targets  | join(" ")')
          echo "targets=${targets}" >> $GITHUB_ENV
      - id: set-includes
        shell: bash
        run: |
          includes=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.includes')
          echo "includes=${includes}" >> $GITHUB_ENV
      - id: set-test-on-host
        shell: bash
        run: |
          test_on_host=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.test_on_host')
          echo "test_on_host=${test_on_host}" >> $GITHUB_ENV
      - id: set-test-on-device
        shell: bash
        run: |
          test_on_device=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.test_on_device')
          echo "test_on_device=${test_on_device}" >> $GITHUB_ENV
      - id: set-docker-service
        shell: bash
        run: |
          docker_service=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -r '.docker_service')
          echo "docker_service=${docker_service}" >> $GITHUB_ENV
    outputs:
      platforms: ${{ env.platforms }}
      targets: ${{ env.targets }}
      includes: ${{ env.includes }}
      docker_service: ${{ env.docker_service }}
      test_on_host: ${{ env.test_on_host }}
      test_on_device: ${{ env.test_on_device }}

  # Runs builds.
  build:
    needs: [initialize]
    permissions: {}
    runs-on: ubuntu-latest
    name: ${{ matrix.name }}_${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.initialize.outputs.platforms) }}
        include: ${{ fromJson(needs.initialize.outputs.includes) }}
        config: [devel, debug, qa, gold]
    env:
      TEST_ARTIFACTS_KEY: ${{ matrix.platform }}_${{ matrix.name }}_test_artifacts
      DEPOT_TOOLS_UPDATE: 0
      DEPOT_TOOLS_REPORT_BUILD: 0
      DEPOT_TOOLS_COLLECT_METRICS: 0
      DEPOT_TOOLS_METRICS: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: src
      - name: Build Cobalt
        uses: ./src/.github/actions/build
        with:
          targets: ${{ needs.initialize.outputs.targets }}
          test_artifacts_key: ${{ env.TEST_ARTIFACTS_KEY }}
      - name: Upload On Device Test Artifacts
        if: matrix.config == 'devel' && needs.initialize.outputs.test_on_device == 'true'
        uses: ./src/.github/actions/upload_test_artifacts

  test:
    needs: [initialize, build]
    if: needs.initialize.outputs.test_on_host == 'true' || needs.initialize.outputs.test_on_device == 'true'
    permissions: {}
    runs-on: ubuntu-latest
    name: ${{ matrix.name }}_tests
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.initialize.outputs.platforms) }}
        include: ${{ fromJson(needs.initialize.outputs.includes) }}
        config: [devel]
    env:
      TEST_RESULTS_DIR: ${{ matrix.name }}_test_results
      TEST_ARTIFACTS_KEY: ${{ matrix.platform }}_${{ matrix.name }}_test_artifacts
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: src
      - name: Run On-Host Tests
        id: on-host-tests
        if: always() && needs.initialize.outputs.test_on_host == 'true'
        uses: ./src/.github/actions/on_host_tests
        with:
          test_artifacts_key: ${{ env.TEST_ARTIFACTS_KEY }}
          results_dir: ${{ env.TEST_RESULTS_DIR }}
          platform: ${{ inputs.platform }}
      - name: Process Test Results
        if: |
          always() &&
          (
            steps.on-host-tests.outcome == 'success' ||
            steps.on-host-tests.outcome == 'failure'
          )
        uses: ./src/.github/actions/process_test_results
        with:
          results_dir: ${{ env.TEST_RESULTS_DIR }}
          datadog_api_key: ${{ secrets.DD_API_KEY }}
          is_postsubmit: ${{ github.event_name == 'schedule' || github.event_name == 'push' }}
        continue-on-error: true
